const path = require('path');
const fs = require('fs');
const existsSync = fs.existsSync;
const utils = require('../utils');
module.exports = exec;
module.exports.expandScript = expandScript;
/**
 * Reads the cwd/package.json file and looks to see if it can load a script
 * and possibly an exec first from package.main, then package.start.
 *
 * @return {Object} exec & script if found
 */
function execFromPackage() {
  try {
    var pkg = require(path.join(process.cwd(), 'package.json'));
    if (pkg.main !== undefined) {
      return { exec: null, script: pkg.main };
    }
    if (pkg.scripts && pkg.scripts.start) {
      return { exec: pkg.scripts.start };
    }
  } catch (e) {}
  return null;
}
function replace(map, str) {
  var re = new RegExp('{{(' + Object.keys(map).join('|') + ')}}', 'g');
  return str.replace(re, function (all, m) {
    return map[m] || all || '';
  });
}
function expandScript(script, ext) {
  if (!ext) {
    ext = '.js';
  }
  if (script.indexOf(ext) !== -1) {
    return script;
  }
  if (existsSync(path.resolve(script))) {
    return script;
  }
  if (existsSync(path.resolve(script + ext))) {
    return script + ext;
  }
  return script;
}
/**
 * Discovers all the options required to run the script
 * and if a custom exec has been passed in, then it will
 * also try to work out what extensions to monitor and
 * whether there's a special way of running that script.
 *
 * @param  {Object} nodemonOptions
 * @param  {Object} execMap
 * @return {Object} new and updated version of nodemonOptions
 */
function exec(nodemonOptions, execMap) {
  if (!execMap) {
    execMap = {};
  }
  var options = utils.clone(nodemonOptions || {});
  var script;
  if (!options.script && (options.args || []).length) {
    script = expandScript(
      options.args[0],
      options.ext && '.' + (options.ext || 'js').split(',')[0]
    );
    if (script !== options.args[0]) {
      options.script = script;
      options.args.shift();
    }
  }
  if (!options.exec && !options.script) {
    var found = execFromPackage();
    if (found !== null) {
      if (found.exec) {
        options.exec = found.exec;
      }
      if (!options.script) {
        options.script = found.script;
      }
      if (Array.isArray(options.args) && options.scriptPosition === null) {
        options.scriptPosition = options.args.length;
      }
    }
  }
  script = path.basename(options.script || '');
  var scriptExt = path.extname(script).slice(1);
  var extension = options.ext;
  if (extension === undefined) {
    var isJS = scriptExt === 'js' || scriptExt === 'mjs' || scriptExt === 'cjs';
    extension = isJS || !scriptExt ? 'js,mjs,cjs' : scriptExt;
    extension += ',json'; 
  }
  var execDefined = !!options.exec;
  if (!options.exec && execMap[scriptExt] !== undefined) {
    options.exec = execMap[scriptExt];
    execDefined = true;
  }
  options.execArgs = nodemonOptions.execArgs || [];
  if (Array.isArray(options.exec)) {
    options.execArgs = options.exec;
    options.exec = options.execArgs.shift();
  }
  if (options.exec === undefined) {
    options.exec = 'node';
  } else {
    var substitution = replace.bind(null, {
      filename: options.script,
      pwd: process.cwd(),
    });
    var newExec = substitution(options.exec);
    if (
      newExec !== options.exec &&
      options.exec.indexOf('{{filename}}') !== -1
    ) {
      options.script = null;
    }
    options.exec = newExec;
    var newExecArgs = options.execArgs.map(substitution);
    if (newExecArgs.join('') !== options.execArgs.join('')) {
      options.execArgs = newExecArgs;
      delete options.script;
    }
  }
  if (options.exec === 'node' && options.nodeArgs && options.nodeArgs.length) {
    options.execArgs = options.execArgs.concat(options.nodeArgs);
  }
  if (
    !execDefined &&
    options.exec === 'node' &&
    scriptExt.indexOf('coffee') !== -1
  ) {
    options.exec = 'coffee';
    var leadingArgs = (options.args || []).splice(0, options.scriptPosition);
    options.execArgs = options.execArgs.concat(leadingArgs);
    options.scriptPosition = 0;
    if (options.execArgs.length > 0) {
      options.execArgs = ['--nodejs', options.execArgs.join(' ')];
    }
  }
  if (options.exec === 'coffee') {
    if (options.ext === undefined) {
      if (extension) {
        extension += ',';
      }
      extension += 'coffee,litcoffee';
    }
    if (utils.isWindows) {
      options.exec += '.cmd';
    }
  }
  extension = (extension.match(/[^,*\s]+/g) || [])
    .map((ext) => ext.replace(/^\./, ''))
    .join(',');
  options.ext = extension;
  if (options.script) {
    options.script = expandScript(
      options.script,
      extension && '.' + extension.split(',')[0]
    );
  }
  options.env = {};
  if ({}.toString.apply(nodemonOptions.env) === '[object Object]') {
    options.env = utils.clone(nodemonOptions.env);
  } else if (nodemonOptions.env !== undefined) {
    throw new Error('nodemon env values must be an object: { PORT: 8000 }');
  }
  return options;
}